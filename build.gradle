// https://github.com/wpilibsuite/GradleRIO
plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2020.1.1-beta-2"
}

def TEAM = 604
def ROBOT_CLASS = "com._604robotics.robot2019.Robot2019"

dependencies {

    compile wpi.deps.wpilib()
    testCompile 'junit:junit:4.12'
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    // compile ctre()
    nativeLib files("lib/rio/libpathfinderjava.so")
    compile fileTree(include: '*.jar', dir: 'lib')
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
}

deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamOrDefault(TEAM)
            // addresses << '10.6.4.2' // RIO IP Address
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Fat Jar with manifest
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}
